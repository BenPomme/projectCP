rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isTournamentOwner(tournamentId) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.ownerId == request.auth.uid;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if true; // Allow creation during registration
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Entries collection
    match /entries/{entryId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin() || isTournamentOwner(resource.data.tournamentId));
      allow delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin() || isTournamentOwner(resource.data.tournamentId));
    }

    // Votes collection
    match /votes/{voteId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated();
      allow delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin() || isTournamentOwner(resource.data.tournamentId));
    }

    // Legacy tournament state (for backward compatibility)
    match /tournament/{document} {
      allow read: if true; // Public read access
      allow write: if isAdmin();
    }
    
    // New tournaments collection
    match /tournaments/{tournamentId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated(); // Any authenticated user can create a tournament
      allow update, delete: if isAuthenticated() && 
        (resource.data.ownerId == request.auth.uid || isAdmin());
    }

    // Admin collection
    match /admin/{document=**} {
      allow read, write: if isAdmin();
    }
  }
} 